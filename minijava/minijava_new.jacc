%package minijava
%class Parser
%interface TokensNew

%{
    import minijava.ast.*;
%}

%token<Token> INT BOOLEAN ID CLASS ID EXTENDS THIS IF ELSE WHILE PRINTLN PUBLIC RETURN STATIC VOID MAIN STRING
%token<Token> '[' ']' '<' '+' '-' '*' '/' '!' '.' ',' '(' ')' ';'
%token<Token> AND EQUALS NEQUALS TRUE FALSE NUM NULL NEW INT LENGTH

%next proximo()
%get tipo
%semantic Object: token

%type<Exp> exp pexp
%type<java.util.List> exps 
%type <String> tipo
%type <Cmd> cmd
%type <Metodo> metodo
%type <Var> var
%type <Classe> classe
%type <Prog> prog
%type <Main> main
%type <java.util.List> cmds
%type <java.util.List> params
%type <java.util.List> vars
%type <java.util.List> classes
%type <java.util.List> metodos

%left AND
%left '<' EQUALS NEQUALS
%left '+' '-'
%left '*' '/'
%left NEG

%right '!'
%left ID

%nonassoc NOELSE
%nonassoc ELSE

%%

prog : main classes { saida = new Prog($1, $2); $$ = saida; }
     ;

main : CLASS ID '{' PUBLIC STATIC VOID MAIN '(' STRING '[' ']' ID ')' '{' cmd '}' '}' { $$ = new Main($2.texto, $12.texto, $15); }
     ;

classes : classes classe { $1.add(0, $2); $$ = $1; }
        | { $$ = new java.util.ArrayList<Classe>(); }
        ;

classe : CLASS ID EXTENDS ID '{' vars metodos '}' { $$ = new Classe($2.texto, $4.texto, $5, $6); }
       | CLASS ID '{' vars metodos '}' { $$ = new Classe($2.texto, $5, $6); }
       ;

vars : vars var { $1.add($2); $$ = $1; }
     |          { $$ = new java.util.ArrayList<Var>(); }
     ;

var : tipo ID ';'  { $$ = new Var($1, $2.texto, $2.lin); }
    ;

metodos : metodos metodo { $1.add(0, $2); $$ = $1; }
        |                { $$ = new java.util.ArrayList<Metodo>(); }
        ;

metodo : PUBLIC tipo ID '(' ')' '{' vars cmds RETURN exp ';' '}'
         { $$ = new Metodo($2, $3.texto, new java.util.ArrayList<Var>(), $7, $8, $10); }
       | PUBLIC tipo ID '(' params ')' '{' vars cmds RETURN exp ';' '}'
         { $$ = new Metodo($2, $3.texto, $5, $8, $9, $11); }
       ;

params : params ',' tipo ID   { $1.add(new Var($3, $4.texto, $4.lin)); $$ = $1; }
       | tipo ID              { java.util.List<Var> l = new java.util.ArrayList<Var>();
                                l.add(new Var($1, $2.texto, $2.lin)); $$ = l; }
       ;

tipo : INT '[' ']'  { $$ = "int[]"; }
     | BOOLEAN      { $$ = "boolean"; }
     | INT          { $$ = "int"; }
     | ID           { $$ = $1.texto; }
     ;

cmd : '{' cmds '}'                         { $$ = new Bloco($2); }
    | IF '(' exp ')' cmd %prec NOELSE      { $$ = new If($3, $5, $1.lin); }
    | IF '(' exp ')' cmd ELSE cmd          { $$ = new If($3, $5, $7, $1.lin); }
    | WHILE '(' exp ')' cmd                { $$ = new While($3, $5, $1.lin); }
    | PRINTLN '(' exp ')' ';'              { $$ = new Println($3, $1.lin); }
    | ID '=' exp ';'                       { $$ = new Atrib($1.texto, $3, $2.lin); }
    | ID '[' exp ']' '=' exp ';'           { $$ = new AtribVetor($1.texto, $3, $6, $5.lin); }
    ;

cmds : cmds cmd { $1.add($2); $$ = $1; }
     |          { $$ = new java.util.ArrayList<Cmd>(); }
     ;

exp : exp '+' exp  { $$ = new Soma($1, $3, $2.lin); }
    | exp '-' exp  { $$ = new Sub($1, $3, $2.lin); }
    | exp '*' exp  { $$ = new Mult($1, $3, $2.lin); }
    | exp '/' exp  { $$ = new Div($1, $3, $2.lin); }
    | exp '<' exp  { $$ = new Menor($1, $3, $2.lin); }
    | exp EQUALS exp   { $$ = new Igual($1, $3, $2.lin); }
    | exp NEQUALS exp  { $$ = new Dif($1, $3, $2.lin); }
    | exp AND exp  { $$ = new ELog($1, $3, $2.lin); }
    | '-' exp %prec NEG { $$ = new Neg($2, $1.lin); }
    | '!' exp      { $$ = new Nao($2, $1.lin); }
    | TRUE         { $$ = new True(); }
    | FALSE        { $$ = new False(); }
    | NUM          { $$ = new Num($1.texto); }
    | NULL         { $$ = new Null(); }
    | NEW INT '[' exp ']' { $$ = new Vetor($4, $1.lin); }
    | pexp '.' LENGTH     { $$ = new Length($1, $2.lin); }
    | pexp '[' exp ']'    { $$ = new Indexa($1, $3, $2.lin); }
    | pexp
    ;

pexp : ID             { $$ = new Id($1.texto, $1.lin); }
     | THIS           { $$ = new This($1.lin); }
     | NEW ID '(' ')' { $$ = new New($2.texto, $1.lin); }
     | '(' exp ')'    { $$ = $2; }
     | pexp '.' ID    { $$ = new Campo($1, $3.texto, $2.lin); }
     | pexp '.' ID '(' exps ')' { $$ = new Chamada($1, $3.texto, $5, $2.lin); }
     | pexp '.' ID '(' ')' { $$ = new Chamada($1, $3.texto, new java.util.ArrayList<Exp>(), $2.lin); }
     ;

exps : exps ',' exp   { $1.add($3); $$ = $1; }
     | exp            { java.util.List<Exp> l = new java.util.ArrayList<Exp>();
                        l.add($1); $$ = l; }
     ;

/* rexp : rexp '<' aexp     { $$ = new MenorQue($1, $3, $2.lin); }
     | rexp EQUALS aexp { $$ = new Igual($1, $3, $2.lin); }
     | rexp NEQUALS aexp { $$ = new Diferente($1, $3, $2.lin); }
     | aexp              
     ;

aexp : aexp '+' mexp { $$ = new Soma($1, $3, $2.lin); }
     | aexp '-' mexp { $$ = new Sub($1, $3, $2.lin); }
     | mexp          
     ;

mexp : mexp '*' sexp { $$ = new Mult($1, $3, $2.lin); }
     | mexp '/' sexp { $$ = new Div($1, $3, $2.lin); }
     | sexp          
     ;

sexp : '!' sexp            { $$ = new Nao($2, $1.lin); }
     | '-' sexp %prec NEG  { $$ = new Neg($2, $1.lin); }
     | TRUE                { $$ = new True(); }
     | FALSE               { $$ = new False(); }
     | NUM                 { $$ = new Num($1.texto); }
     | NULL                { $$ = new Null(); }
     | NEW INT '[' exp ']' { $$ = new Vetor($4, $1.lin); }
     | pexp '.' LENGTH     { $$ = new Length($1, $2.lin); }
     | pexp '[' exp ']'    { $$ = new Indexa($1, $3, $2.lin); }
     | pexp
     ;

pexp : ID                       { $$ = new Id($1.texto, $1.lin); }
     | THIS                     { $$ = new This($1.lin); }
     | NEW ID '(' ')'           { $$ = new New($2.texto, $1.lin); }
     | '(' exp ')'              { $$ = $2; }
     | pexp '.' ID              { $$ = new Campo($1, $3.texto, $2.lin); }
     | pexp '.' ID '(' exps ')' { $$ = new Chamada($1, $3.texto, $5, $2.lin); }
     | pexp '.' ID '(' ')'      { $$ = new Chamada($1, $3.texto, new java.util.ArrayList<Exp>(), $2.lin); }
     ;

exps : exps ',' exp   { $1.add($3); $$ = $1; }
     | exp            { java.util.List<Exp> l = new java.util.ArrayList<Exp>();
                        l.add($1); $$ = l; }
     ; */
%%

Scanner scan;

Token token;  // lookahead
int tipo;     // tipo do lookahead

public Prog saida; // workaround pro bug do tipo do parse()

public Parser(java.io.Reader entrada) {
  scan = new Scanner(entrada);
  proximo(); // inicializa o lookahead
}

int proximo() {
  try {
    token = scan.nextToken();
    tipo = token.tipo;
    return tipo;
  } catch(java.io.IOException e) {
    throw new RuntimeException(e);
  }
}

void yyerror(String msg) {
  throw new RuntimeException("erro de sintaxe na linha: " + token.lin);
}